# shellcheck shell=bash disable=SC2034

# # build all arches in arch.yaml,regardless of the source image arches
# BUILD_ARCH="$(sed -En 's/(^\w*):\s*$/\1/p' "${ARCH_YAML}" | sort -u | xargs)"

# architectures we can build
BUILD_ARCH='amd64 arm arm64 armhf i486 i686 mips64le ppc64le riscv64 s390x'

# architectures already built for us
PREBUILT_ARCH='amd64 arm arm64 armhf i386 i486 i686 ppc64le riscv64 s390x'

# build all containers with linux/amd64 platform, since they're for multi-stage
# builds are it's the most likely build platform
PLATFORM_OVERRIDE="linux/amd64"

# don't push manifest, we'll be pulling from downstream with the arch specified
# in the tag so there's no need for a combined multi-arch tag
NO_MANIFEST=1

BUILD_BUILDX=1

declare -A BUILD_ARGS=( \
	[S6_ARCH]='S6 arch' \
	[S6_V2_ARCH]='S6 v2 arch' \
	[SCRATCH_ARCH_TAG]='Scratch arch tag' \
	[S6_OVERLAY_VERSION]='S6 overlay version' \
	[S6_OVERLAY_MAJOR]='S6 overlay major' \
	[CROSS_ARCH]='cross arch' \
	[CROSS_ABI]='cross ABI'
)

declare -A CHECKOUT_DISPLAY=( \
	[S6_ARCH]='S6 arch' \
	[S6_OVERLAY_LATEST]='S6 latest' \
)

# define source packages we need and their GitHub repos
declare -A SOURCE_PACKAGES=(
	[EXECLINE]='skarnet/execline'
	[S6]='skarnet/s6'
	[S6_DNS]='skarnet/s6-dns'
	[S6_LINUX_INIT]='skarnet/s6-linux-init'
	[S6_LINUX_UTILS]='skarnet/s6-linux-utils'
	[S6_NETWORKING]='skarnet/s6-networking'
	[S6_OVERLAY]='just-containers/s6-overlay'
	[S6_OVERLAY_HELPERS]='just-containers/s6-overlay-helpers'
	[S6_PORTABLE_UTILS]='skarnet/s6-portable-utils'
	[S6_RC]='skarnet/s6-rc'
	[SKALIBS]='skarnet/skalibs'
)

for package in "${!SOURCE_PACKAGES[@]}"; do
	BUILD_ARGS[${package}_VERSION]="$(echo "${package//_/ }" | tr '[:upper:]' '[:lower:]') version"
	BUILD_ARGS[${package}_REPO]="$(echo "${package//_/ }" | tr '[:upper:]' '[:lower:]') repo"
done

post_checkout_start () {
	echo "Determining s6-overlay versions.."
	add_param "${SOURCE_PACKAGES[S6_OVERLAY]}" 'S6_OVERLAY_REPO'
	eval_param_ifn 'S6_OVERLAY_LATEST' "git_latest_release ${S6_OVERLAY_REPO}"

	eval_param_ifn 'S6_OVERLAY_REPO_TAGS' "git_repo_tags ${S6_OVERLAY_REPO}"

	# use latest if nothing is specified
	if [[ "${DOCKER_TAG}" =~ ^v?[0-9] ]]; then
		S6_OVERLAY_VERSION="$(search_repo_tags "v?${DOCKER_TAG%%-*}" "${S6_OVERLAY_REPO_TAGS}")"
	else
		S6_OVERLAY_VERSION="${S6_OVERLAY_LATEST}"
	fi

	# ensure the leading 'v' is present
	[[ "${S6_OVERLAY_VERSION}" =~ ^v ]] || S6_OVERLAY_VERSION="v${S6_OVERLAY_VERSION}"
	add_param "${S6_OVERLAY_VERSION}" 'S6_OVERLAY_VERSION'
	add_param "${S6_OVERLAY_VERSION:1:1}" 'S6_OVERLAY_MAJOR'

	add_param "$(search_repo_tags "^v?${S6_OVERLAY_MAJOR}" "${S6_OVERLAY_REPO_TAGS}")" 'S6_OVERLAY_MAJOR_LATEST'

	# strip out any leading 'v' for the target tag
	TARGET_TAG="${S6_OVERLAY_VERSION:1}"

	unset DOCKERFILE_OVERRIDE
	unset EXCLUDED_ARCHES
	unset BUILD_TARGET_STAGE
	unset NO_PUSH

	printf 'Preparing to build from: '
	if [[ "${DOCKER_TAG}" =~ .*prebuilt.* ]]; then
		echo "just-containers"
		DOCKERFILE_OVERRIDE="Dockerfile.prebuilt"
		BUILD_ARCH="${PREBUILT_ARCH}"
		TARGET_TAG="${TARGET_TAG}-prebuilt"

		# ppc64le is not available from just-containers/s6-overlay after v2.2.0.3
		# at the same time i386 disappears and 1486 and 1686 appear
		case "${S6_OVERLAY_MAJOR}" in
				"2") EXCLUDED_ARCHES="i486 i686 riscv64 s390x ${EXCLUDED_ARCHES}" ;;
				*) EXCLUDED_ARCHES="ppc64le i386 ${EXCLUDED_ARCHES}" ;;
		esac
	else
		printf "self"
		case "${DOCKER_TAG}" in
			*tarball*)
				echo " (tarballs)"
				BUILD_TARGET_STAGE='out-tarballs'
				TARGET_TAG="${TARGET_TAG}-tarballs"
				add_param 'true' 'NO_PUSH'
				NO_POST_PUSH='true'
				;;
			*)
        echo
				BUILD_TARGET_STAGE='out-overlay'
				;;
		esac

		# get package versions
		echo "Getting package versions.."
		local repo
		local version

		for package in "${!SOURCE_PACKAGES[@]}"; do
			repo="${package}_REPO"
			version="${package}_VERSION"
			add_param "${SOURCE_PACKAGES[$package]}" "${repo}"
			eval_param_ifn "${version}" "git_latest_tag ${!repo}"
		done

		# overrides
#		add_param 'v0.0.1.0' 'S6_OVERLAY_HELPERS_VERSION'
	fi
}


post_build () {
	# 'tarball' builds get contents copied to host
	[[ "${TARGET_TAG}" =~ .*tarball.* ]] || return

	[ -z "${OUT_DIR}" ] && OUT_DIR="builds/${S6_OVERLAY_VERSION}"

	echo "--- copying built files to: ${OUT_DIR}/ ---"
	[ -d "${OUT_DIR}" ] || mkdir -p "${OUT_DIR}"

	local arch
	local var
	local image

	for arch in ${build_arches:-}; do
		var="${arch}_TARGET_ARCH_TAG"
		TARGET_ARCH_TAG="${!var}"
		image="${DOCKER_REPO}:${TARGET_TAG}-${TARGET_ARCH_TAG}"

		[ -n "${NOOP+set}" ] && echo '[NOOP]' && continue

		docker_container_contents "${image}" "${OUT_DIR}/"
		rm -rf ${OUT_DIR}/.arch >/dev/null 2>&1 || true
	done
	echo

	# tarballs can also be extracted for testing binaries
	echo "--- checking files ---"

	local TEMP_DIR && TEMP_DIR=".files"
	local ARCH_DIR
	local overlay_archive

	for arch in ${build_arches:-}; do
		var="${arch}_S6_ARCH"
		S6_ARCH="${!var}"

	  overlay_archive="$(find builds/ -name "s6-overlay-${S6_ARCH}.tar.xz" | sort -uV | tail -n1)"
	  [ -z "${overlay_archive}" ] && continue

	  ARCH_DIR="${TEMP_DIR}/${arch}"
	  mkdir -p "${ARCH_DIR}"
	  tar -xJf "${overlay_archive}" -C "${ARCH_DIR}"
	  printf '%-10s %s\n' "${arch}" "$(find "${TEMP_DIR}/${arch}" -type f -name execlineb -exec file -b {} \;)"
	done
	rm -rf "${TEMP_DIR}"

	echo
	echo "Note: Static-PIE executables may display as 'LSB shared object' and 'dynamically linked'. This"
	echo "appears to depend on the version of 'file' in use, as they report 'LSB pie executable' and"
	echo "'static-pie linked' from inside the containers."
}

get_base_tags () {
	local extra_tags && extra_tags=()
	local tag_suffix

	case ${TARGET_TAG} in
		*prebuilt*)	tag_suffix='-prebuilt' ;;
		*tarballs*)	tag_suffix='-tarballs' ;;
		*) unset tag_suffix ;;
	esac

	[ "${S6_OVERLAY_VERSION}" = "${S6_OVERLAY_LATEST}" ] \
		&& extra_tags+=("latest${tag_suffix}")

	# [ "${S6_OVERLAY_VERSION}" = "${S6_OVERLAY_MAJOR_LATEST}" ] \
	# 	&& extra_tags+=("${S6_OVERLAY_MAJOR}${tag_suffix}")

	echo "${extra_tags[@]}"
}

get_manifest_tags () {	echo "$(get_base_tags)"; }
